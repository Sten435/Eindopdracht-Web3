generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model groep {
  ID           Int            @id @default(autoincrement())
  Naam         String         @db.VarChar(255)
  Aanmaakdatum DateTime       @default(now()) @db.DateTime(0)
  Geldig       Int            @default(1)
  groepstudent groepstudent[]
}

model groepstudent {
  GroepID      Int
  StudentID    Int
  Aanmaakdatum DateTime @default(now()) @db.DateTime(0)
  Geldig       Int      @default(1)
  groep        groep    @relation(fields: [GroepID], references: [ID], onUpdate: Restrict, map: "groepstudent_ibfk_1")
  student      student  @relation(fields: [StudentID], references: [ID], onUpdate: Restrict, map: "groepstudent_ibfk_2")

  @@id([StudentID, GroepID])
  @@index([GroepID], map: "GroepID")
}

model opdracht {
  ID              Int               @id @default(autoincrement())
  Naam            String            @unique(map: "Naam_UNIQUE") @db.VarChar(512)
  Geldig          Int               @default(1)
  Aanmaakdatum    DateTime          @default(now()) @db.DateTime(0)
  opdrachtelement opdrachtelement[]
}

model opdrachtelement {
  ID           Int       @unique @default(autoincrement())
  OpdrachtID   Int
  Beschrijving String    @db.VarChar(4096)
  Minuten      Int       @default(1)
  Geldig       Int       @default(1)
  Aanmaakdatum DateTime  @default(now()) @db.DateTime(0)
  opdracht     opdracht  @relation(fields: [OpdrachtID], references: [ID], onUpdate: Restrict, map: "opdrachtelement_ibfk_1")
  rapport      rapport[]

  @@id([ID, Aanmaakdatum])
  @@index([OpdrachtID], map: "OpdrachtID")
}

model rapport {
  ID                Int             @id @default(autoincrement())
  StudentID         Int
  OpdrachtElementID Int
  Status            Int             @default(0)
  ExtraMinuten      Int             @default(0)
  Aanmaakdatum      DateTime?       @default(now()) @db.DateTime(0)
  Geldig            Int             @default(1)
  student           student         @relation(fields: [StudentID], references: [ID], onUpdate: Restrict, map: "rapport_ibfk_1")
  opdrachtelement   opdrachtelement @relation(fields: [OpdrachtElementID], references: [ID], onUpdate: Restrict, map: "rapport_ibfk_2")
  vraagstudent      vraagstudent[]

  @@index([OpdrachtElementID], map: "OpdrachtElementID")
  @@index([StudentID], map: "StudentID")
}

model student {
  ID             Int            @id @default(autoincrement())
  Code           String         @db.VarChar(45)
  Familienaam    String         @db.VarChar(45)
  Voornaam       String         @db.VarChar(45)
  Email          String         @db.VarChar(90)
  Aanmaakdatum   DateTime?      @default(now()) @db.DateTime(0)
  Geldig         Int            @default(1)
  groepstudent   groepstudent[]
  rapport        rapport[]
}

model vraagstudent {
  ID           Int       @id @default(autoincrement())
  RapportID    Int
  Beschrijving String    @db.VarChar(255)
  Aanmaakdatum DateTime? @default(now()) @db.DateTime(0)
  Geldig       Int?      @default(1)
  rapport      rapport   @relation(fields: [RapportID], references: [ID], onUpdate: Restrict, map: "vraagstudent_ibfk_1")

  @@index([RapportID], map: "RapportID")
}
